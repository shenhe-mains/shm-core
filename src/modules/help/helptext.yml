aliases:
    role-colour: role-color
    mute-silent: mute
    kick-silent: kick
    ban-silent: ban
    massban-from-url: massban
    role: role-add
    role-rm: role-remove
    set-role-colour: set-role-color
    p: play
    pp: playlist
    ppshuffle: playlist-shuffle
    bt: backtrack
    np: nowplaying
    dc: disconnect
    leave: disconnect
    q: queue
text:
    __all:
        title: Shenhe Bot Help
        body: |
            The bot's prefix is `{prefix}`.
            You can get help for a particular module using `{prefix}help <module>`. The following modules exist:

            `automod` - Automoderation features (banned words, spam detection, etc.)
            `autoroles` - Automatically grant roles to returning users
            `customroles` - Custom roles for server supporters
            `db` - Database commands
            `fun` - Fun / miscellaneous commands
            `help` - This module
            `messagelogs` - Logging for message edits / deletions
            `moderation` - Mod commands (muting, banning, etc.)
            `modmail` - Modmail / Ticket system
            `music` - Music Bot
            `nukeguard` - Anti-nuking features
            `polls` - Poll-related commands
            `reactroles` - Self-assignable reaction roles
            `settings` - Bot settings
            `starboard` - Starboard
            `statschannels` - Server stats channels like member count and boosters
            `sticky` - Sticky messages
            `suggestions` - Feedback & Suggestions system
            `triggers` - Autoresponder triggers
            `utility` - Utility and info commands like user info
            `verification` - CAPTCHA verification system
            `website` - https://shenhemains.com
            `welcome` - Welcome messages for new users

            Additionally, there is a module handler (`modulehandler`) that is not itself a module because it is responsible for interfacing between the bot and modules.

            Alternatively, if you have a specific command you want help for, you can run `{prefix}help <command>` (don't include the prefix in the command name).
    automod:
        title: Automoderator Help
        body: >
            The automoderator scans all new messages in this server. Messages sent by bots and certain staff members will not be scanned to allow mods to explain
            why certain words are bad without needing to dodge the censor; however, they are held to higher standards than regular users and may be demoted for
            offences rather than just warned or muted for a few days.


            You can view a list of automod terms [here](https://docs.google.com/spreadsheets/d/15nupMHv84-Si2OLYaBwD3KTjHlI169JjRN5JZjLkIyA/edit?usp=sharing).
            To request for automod terms to be added, removed, or changed, please visit <#805458033471782974>, or, if you are a staff member, you may just mention
            it in <#840864247373103114>.


            Commands in this module: `automod-add`, `automod-rm`, `automod-scan`, `automod-list`
    automod-add:
        title: Automoderator - Add term
        body: >
            `{prefix}automod-add <type> <action> <term to match>`


            Adds a new term to the automoderator. `type` should be one of `substring` (match anywhere), `word` (match regular expression only when surrounded by
            non-letters), or `regex` (match regular expression). `action` should be one of `defer` (alert mod chat), `delete` (silently remove the message), `verbal`
            (send a verbal/unlogged warning), `warn` (send a formal warning), `mute` (mute the user indefinitely and alert mod chat), `kick` (temporarily kick the
            user from the server), or `ban` (ban the user indefinitely and alert mod chat).


            Please only use `word` or `regex` if you know what you're doing with regular expressions. You can request for terms to be added in <#805458033471782974>
            or <#840864247373103114>.
        footer: Requires Bot Owner / Admin
    automod-rm:
        title: Automoderator - Remove term
        body: >
            `{prefix}automod-rm <term to match>`


            Remove a term from the automoderator. You must enter the exact string being matched by the automoderator. You can run `{prefix}automod-list` to find the
            string if you forget what it is.


            You can request for terms to be removed in <#805458033471782974> or <#840864247373103114>.
        footer: Requires Bot Owner / Admin
    automod-scan:
        title: Automoderator - Scan message
        body: >
            `{prefix}automod-scan <message content>`


            Scan a message. This command can be used by anyone but it is recommended to only use it as a moderator because if the scan succeeds, the automoderator
            will trigger and take action against you.
    automod-list:
        title: Automod - List terms
        body: >
            `{prefix}automod-list`


            List all terms currently matched by the automoderator. Due to the nature of the automod, this will contain inappropriate, offensive, and potentially
            triggering terms, and as such, it is restricted. Please only use this in private channels or where you are sure it will not be hurtful to anyone.
        footer: Requires Bot Owner / Admin
    autoroles:
        title: Autoroles
        body: >
            When users leave the server, their existing roles are saved by the bot. When a member rejoins the server, their roles will be restored, except for any
            roles above a certain threshold (such as staff roles). This serves two purposes - firstly, it prevents muted users from clearing their mute by leaving
            the server; secondly, it allows users who rejoin to have the same roles as before without needing to re-verify or set up their reaction roles again.
            Users that are unmuted while absent will also have their mute role cleared for when they return.
    customroles:
        title: Custom Supporter Roles
        body: >
            Server boosters and [Ko-Fi](https://ko-fi.com/shenhe) supporters, on top of receiving the exclusive roles <@&817617933495697469> and
            <@&926279568980058183> respectively, also gain access to custom roles. To get your role, head over to <#805458034251530262> and run
            `{prefix}role-claim <role name>`. Then, you can rename it with `{prefix}role-rename <role name>` or change its color with `{prefix}role-color <color>`.


            Server boosters' roles will be removed when they are no longer boosting the server, but the ko-fi supporter role, and therefore the custom roles, are
            permanent.
    role-claim:
        title: Custom Role - Claim
        body: >
            `{prefix}role-claim <role name>`


            Claim a role with a particular name. You will be granted this role and it will be attached to your account so long as you are a server supporter. If
            your custom role already exists, this does the same thing as `{prefix}role-rename`.
    role-rename:
        title: Custom Role - Rename
        body: >
            `{prefix}role-rename <role name>`


            Rename your custom role. If your role does not exist yet, this does the same thing as `{prefix}role-claim`.
    role-color:
        title: Custom Role - Recolor
        body: >
            `{prefix}role-color <role name>`


            Recolor your custom role. You can enter a hexcode or some common color names such as `red`, `blue`, etc. If you're having trouble with this, you can
            pick a color with [this online color picker](https://imagecolorpicker.com/color-code/d9e9f9) and copy-paste the code (`#` followed by 6 characters).
            If your role does not exist yet, it gets created with the name `new role`.
        footer: "Alias: role-colour"
    db:
        title: Database Query
        body: >
            `{prefix}db <query>`


            Query the database. Please only do this if you know what you're doing. The server is running PostgreSQL with the `pg` node module.
        footer: Requires Developer
    fun:
        title: Fun / Miscellaneous Commands
        body: >
            This is a collection of random non-utility commands.


            Commands in this module: `choose`
    choose:
        title: Choose Random Option
        body: >
            `{prefix}choose <option> <option> <option>` / `{prefix}choose <option with spaces>, <option with spaces>, <etc.>`


            Pick a random option. For example, `{prefix}choose head tails` to flip a coin.
    help:
        title: Help
        body: >
            This is the command you are using right now. `{prefix}help` to see the list of modules, or `{prefix}help <key>` if you have something in particular
            that you need help with.
    messagelogs:
        title: Message Logging
        body: >
            Messages that are edited or deleted are logged to <#922671895495733278> for moderation purposes.
    moderation:
        title: Moderation
        body: >
            This module contains all of the standard moderation utilities - muting, banning, etc.


            Commands in this module: `slowmode`, `verbal`, `warn`, `mute`, `kick`, `ban`, `unmute`, `unban`, `massban`, `massban-from-url`, `remove`,
            `clear-history`, `history`, `nick`, `purge`, `role-add`, `role-remove`, `set-role-name`, `set-role-color`
    slowmode:
        title: Slowmode
        body: >
            `{prefix}slowmode [channel] <duration> [reason]`


            Set the slowmode for a channel (default: current channel) with a particular reason (optional). Set the duration to `0` to remove the slowmode.
        footer: Requires Moderator
    verbal:
        title: Verbally Warn
        body: >
            `{prefix}verbal <user> <reason>`


            Verbally (informally) warn a user. This does not leave any records on their history. Generally, DMing the user directly is better. Also consider
            opening a modmail thread with the user if you have a non-warning inquiry (`{prefix}modmail <user>`). This command will prompt for confirmation.
        footer: Requires Moderator
    warn:
        title: Warn
        body: >
            `{prefix}warn <user> <reason>`


            Warn a user, which is logged to their history. This command will prompt for confirmation. `{prefix}warn-silent` will not DM the user (useful for
            adding a note to a user).
        footer: Requires Moderator
    mute:
        title: Mute
        body: >
            `{prefix}mute <user> [duration] [reason]`


            Mute a user for the specified duration (default 0 = indefinitely), which disables their ability to send messages, add reactions, and connect to
            voice calls. This command will prompt for confirmation. `{prefix}mute-silent` will not DM the user.
        footer: Requires Moderator
    kick:
        title: Kick
        body: >
            `{prefix}kick <user> [reason]`


            Kicks a user for the specified reason. This command will prompt for confirmation. `{prefix}kick-silent` will not DM the user.
        footer: Requires Moderator
    ban:
        title: Ban
        body: >
            `{prefix}ban <user> [duration] [reason]`


            Bans a user for the specified duration (default 0 = indefinitely). This command will prompt for confirmation. `{prefix}ban-silent` will not DM the user.
        footer: Requires Moderator
    unmute:
        title: Unmute
        body: >
            `{prefix}unmute <user> [reason]`


            Unmutes a user, restoring their ability to send messages, add reactions, and connect to voice calls. `{prefix}unmute-silent` will not DM the user. If the
            user is not in the server, it will remove the mute role from their autoroles so they will not be muted when returning to the server.
        footer: Requires Moderator
    unban:
        title: Unban
        body: >
            `{prefix}unban <user> [reason]`


            Unbans a user. If the user is not banned, this command will fail. Because users who do not share a server with a bot cannot be DM'd, this commmand
            will never attempt to DM the user. You should DM them yourself if you feel that it is necessary.
        footer: Requires Moderator
    massban:
        title: Massban
        body: >
            `{prefix}massban <user> <user> ... [reason]` / `{prefix}massban-from-url <url> [reason]`


            Massbans many users. This command will prompt for confirmation including the number of users that will be banned and the reason. This command will not DM
            any of the users who are banned. If you need to massban a lot of users and cannot fit it in one message, consider uploading it to something like
            [GitHub Gist](https://gist.github.com/). Make sure the URL you link is raw plaintext, otherwise it will not be able to parse the user IDs.
        footer: Requires Admin
    remove:
        title: Remove from Records
        body: >
            `{prefix}remove <type> <id>`


            Remove an item from user history by a specific ID. `type` must be one of `warn`, `mute`, `kick`, or `ban`. Note that this command does not fail if the ID
            was not found or is invalid.
        footer: Requires Admin
    clear-history:
        title: Clear User History
        body: >
            `{prefix}clear-history <user> [type]`


            Remove all items from a user's history. `type` must be one of `warns`, `mutes`, `kicks`, or `bans`. If `type` is not specified, this will remove all of a
            user's history.
        footer: Requires Admin
    history:
        title: View User History
        body: >
            `{prefix}history <user> [types...]`


            Show a user's history. `type` arguments must be each one of `warns`, `mutes`, `kicks`, or `bans`. If no types are specified, this will list a user's entire
            history.
        footer: Requires Staff
    nick:
        title: Set Nickname
        body: >
            `{prefix}nick [user] [nickname]`


            Set a user's nickname. If the user is not specified, defaults to yourself. If the nickname is not provided, it will reset the user's nickname. You are always
            allowed to use this command on yourself. If using this on another user, you must be a moderator or above and outrank them. If using this on the bot, you must
            have permission to modify bot settings.
    purge:
        title: Purge Messages
        body: >
            `{prefix}purge <N>`


            Purge `N` messages. This command will prompt for confirmation.
        footer: Requires Moderator
    role-add:
        title: Add Role to Member
        body: >
            `{prefix}role-add <user> <roles...>`


            Add the specified roles to the target user. All roles must be below your highest role, and you must outrank the user. A.K.A. `{prefix}role`.
        footer: Requires Moderator
    role-remove:
        title: Remove Role from Member
        body: >
            `{prefix}role-remove <user> <roles...>`


            Remove the specified roles from the target user. All roles must be below your highest role, and you must outrank the user. A.K.A. `{prefix}role-rm`.
        footer: Requires Moderator
    set-role-name:
        title: Rename Role
        body: >
            `{prefix}set-role-name <role> <name>`


            Rename the specified role.
        footer: Requires Bot Owner / Admin
    set-role-color:
        title: Recolor Role
        body: >
            `{prefix}set-role-color <role> [color]`


            Recolor the specified role (default removes the color). A.K.A. `{prefix}set-role-colour`.
        footer: Requires Bot Owner / Admin
    modmail:
        title: Modmail / Ticket System
        body: >
            The modmail system provides a way for users to communicate with the server's staff and vice versa. To contact the staff, simply DM the bot. It will prompt
            you for confirmation that you actually want to open a modmail thread, and once you do, a channel will be created for the moderators where they can interact
            with you. Messages they send to you will be sent to your DMs and your DMs will continue to be forwarded to the channel until the thread is closed. Please
            only use modmail for serious inquiries that require staff attention.


            Modmail threads are logged to <#911071731265986560> when they are opened or closed, and can be viewed on the website via the staff dashboard. You can open
            a modmail thread with a user using `{prefix}modmali <user>`, which creates the modmail channel if it does not already exist. The user will not be notified of
            this. To reply, use `{prefix}reply <message>` or `{prefix}anonreply <message>`. To close the thread (does not delete the channel), you can do `{prefix}close`
            or `{prefix}silentclose` to not DM the user that the thread has been closed. Once you are done with the channel entirely, `{prefix}delete` will delete a
            channel that has been closed. It is not preferred to do this, but manually deleting an open modmail channel will silently close it.


            Both `{prefix}close` and `{prefix}silentclose` will disconnect the modmail thread from the user, which essentially means the channel is just a normal channel.
            This means you cannot `{prefix}reply` in it anymore and if the user DMs the bot, it will prompt them to open a new modmail thread. The only difference between
            a closed modmail chanenl and a normal channel is that anyone can `{prefix}delete` it.
    music:
        title: Music Bot
        body: >
            This bot comes with a generic music bot capable of handling most normal operation (but without "extra" commands like bassboost, nightcore, etc). To use the
            bot, just join a voice channel and summon the bot, or if the bot is already playing somewhere, join that voice channel. You can use `{prefix}play <song>` to
            add songs to the queue, `{prefix}queue` to view the queue, etc.


            Commands in this module: `play`, `playlist`, `playlist-shuffle`, `search`, `pause`, `unpause`, `skip`, `backtrack`, `restart-player`, `nowplaying`, `stop`,
            `disconnect`, `queue`, `songhistory`, `repeat`, `loop`, `radio`, `rm-song`, `shuffle`, `shuffle-all`, `volume`, `lyrics`
    play:
        title: Play Music
        body: >
            `{prefix}play <URL or search>`


            Add a song to the queue. If the query given is not a URL, it will search for the term and, if an entry is found, queue the first one. To preview the search
            results and choose which one to play, use `{prefix}search`.
        footer: "Aliases: p"
    playlist:
        title: Play Playlist
        body: >
            `{prefix}playlist <URL>`


            Add a playlist to the queue. This operation may take a while but the first song should start playing pretty quickly. Due to limitations with the library,
            if the playlist has too many songs, only the first 100 will be added.
        footer: "Aliases: pp"
    playlist-shuffle:
        title: Insert Playlist, Shuffled
        body: >
            `{prefix}playlist-shuffle <URL>`


            Add a playlist to the queue, shuffling it before it is added. This will not affect the order of other songs, but allows you to shuffle a playlist as you
            insert it into the queue.
        footer: "Aliases: ppshuffle"
    search:
        title: Play Music, Search
        body: >
            `{prefix}search <search>`


            Search for the song on YouTube and if there are multiple options, prompt with up to 5, allowing you to choose which one to play, or cancel instead. If you
            enter a YouTube URL, this command will just add it directly, as will it if the search term only returns one result.
    pause:
        title: Pause Music
        body: >
            `{prefix}pause`


            Pause the audio player. Actions like skipping will automatically unpause, or you can manually unpause with `{prefix}unpause`
    unpause:
        title: Unpause Music
        body: >
            `{prefix}unpause`


            Resumes the audio player. You can pause again with `{prefix}pause`.
    skip:
        title: Skip Songs
        body: >
            `{prefix}skip [N]`


            Skip `N` songs, including the current one. By default, `N` is one.
    backtrack:
        title: Backtrack Songs
        body: >
            `{prefix}backtrack [N]`


            Skip `N` songs backwards, moving back `N` places in the history. By default, `N` is one.
        footer: "Aliases: bt"
    restart-player:
        title: Restart Player
        body: >
            `{prefix}restart-player`


            Move the audio player back to the first song in the entire list (including the history) and start playing from there.
    nowplaying:
        title: Show Current Song Info
        body: >
            `{prefix}nowplaying`


            Show information about the song that's current playing.
        footer: "Aliases: np"
    stop:
        title: Stop Music Player
        body: >
            `{prefix}stop`


            Move the audio player to the end of the queue, stopping the music bot. The queue and history are not removed but simply moved past making this
            easily reversible.
    disconnect:
        title: Disconnect Music Player
        body: >
            `{prefix}disconnect`


            Leave the current voice call, removing the audio player. This also resets the bot's status in the guild, including the queue and song history.
        footer: "Aliases: dc, leave"
    queue:
        title: Show Queue
        body: >
            `{prefix}queue`


            Show upcoming songs that will be played.
        footer: "Aliases: q"
    songhistory:
        title: Show History
        body: >
            `{prefix}songhistory`


            Show the list of past songs that have already been played. This command is not called `{prefix}history` because that conflicts with a moderator command.
    repeat:
        title: Repeat Song
        body: >
            `{prefix}repeat [N]`


            Repeat the current song `N` times. When the player reaches the end of a song while repeating, it will not advance in the queue and will just play the
            same song again. `N` defaults to infinity. Call again to turn off repeat.
    loop:
        title: Loop Queue
        body: >
            `{prefix}loop [N]`


            Repeat the entire queue `N` times. When the player reaches the end of the queue while advancing, it will move back to the start if this object is on.
            `N` defaults to infinity. Call again to turn off loop.
    radio:
        title: Radio Mode
        body: >
            `{prefix}radio`


            Toggle radio mode. When radio mode is on, if the player reaches the end of the queue, it will pick a random song and keep going. This takes precedence
            over loop but not over repeat.
    rm-song:
        title: Remove Song
        body: >
            `{prefix}remove [A] [B]`


            Remove (a) song(s) from the queue. `{prefix}remove` removes the current song and plays the next one. `{prefix}remove <A>` removes the song at position
            `A`. `{prefix}remove <A> <B>` removes all songs with indices between `A` and `B`. This command is not called `{prefix}remove` because that conflicts
            with a moderator command.
    shuffle:
        title: Shuffle Queue
        body: >
            `{prefix}shuffle [N]`


            If `N` is not specified, it shuffles the whole queue by default. Otherwise, the next `N` elements are shuffled.
    shuffle-all:
        title: Shuffle All Music
        body: >
            `{prefix}shuffle-all


            Shuffle all of the songs, including ones in history and the current one. If the current song gets moved, the player will restart with the new song, but
            it is also possible that the song ends up in the same spot and isn't restarted.
    volume:
        title: Set Music Volume
        body: >
            `{prefix}volume <volume>`


            Set the volume (min. 0, max. 100). This will persist so long as the music player is connected.
    lyrics:
        title: Get Song Lyrics
        body: >
            `{prefix}lyrics [query]`


            Search for the song on Genius and fetch the lyrics. If you are currently in a voice call with the bot and it is playing music, you can exclude the query
            and it will automatically search for the song it is playing (although this may not work due to many YouTube videos having a lot of extra words and characters
            in it, or because the title is in a different language).
    nukeguard:
        title: Anti-Nuking System
        body: >
            This server has some systems in place to prevent nuking (when moderators / admins turn on a server and do massive and irreparable damage to it, sometimes
            requiring it to essentially be completely remade). Currently, all important, non-temporary channels are protected, and if they are deleted, the user who
            deleted it will be banned and admin chat will be notified. Also, whenever a role is deleted, admin chat is notified and the old role's members are saved
            in case the role needs to be restored via copying to a new role.
    polls:
        title: Polls
        body: >
            Commands in this module: `poll`, `open-poll`, `close-poll`, `poll-results`, `disclose`
    poll:
        title: Setup Poll
        body: |
            `{prefix}poll <channel> <type> <body> ;; <option> ;; <option> ...`

            Creates a new poll in the specified channel. `type` must be one of `normal`, `unique`, `commit`, `hidden`, `hidden_unique`, `hidden_commit`, or `show_on_commit`.

            `normal` - standard poll; users can add or remove votes to multiple options at any time
            `unique` - users can only choose exactly one option; choosing another one will swap their vote and remove the previous one
            `commit` - users can only choose exactly one option and cannot change it later
            `hidden` - standard poll like `normal`, but the poll message does not update to show the votes
            `hidden_unique` - `unique` + `hidden`
            `hidden_commit` - `commit` + `hidden`
            `show_on_commit` - `commit` + `hidden`, but when the user locks in their vote, they are shown the current vote distribution
        footer: Requires Admin
    open-poll:
        title: Open Poll
        body: >
            `{prefix}open-poll <message id>`


            Open up a poll to voting. Polls are open to voting when created, but may be closed via `{prefix}close-poll`
        footer: Requires Admin
    close-poll:
        title: Close Poll
        body: >
            `{prefix}close-poll <message id>`


            Close a poll by disabling all of the buttons on it. Polls can be reopened via `{prefix}open-poll`. Closing a poll does not do anything else like show results.
        footer: Requires Admin
    poll-results:
        title: Show Poll Results
        body: >
            `{prefix}poll-results <message id>`


            Display a poll's current votes.
        footer: Requires Admin
    disclose:
        title: Reveal Poll results
        body: >
            `{prefix}disclose <message id>`


            Edit a poll's results into the poll message. This command is not needed for normal polls as the editing is done automatically, only for hidden polls. Note
            that this action cannot be undone, and the results will not update automatically later if it is a hidden poll.
        footer: Requires Admin
    reactroles:
        title: Reaction Roles
        body: >
            Reaction roles allow a user to assign themselves roles by clicking a button, such as server region roles or pronoun roles. Use `{prefix}setup-react-roles` to
            initiate the process, and the bot will guide you through the process (please use <#841866382840561705> for this as it generates a lot of messages).
    settings:
        title: Bot Settings
        body: >
            This module contains commands used to modify the bot's settings. There is no help text or command list for this as it is basically only used by the developer
            who is way too lazy to keep the list updated.
        footer: Requires Bot Owner / Admin
    starboard:
        title: Starboard
        body: >
            React ⭐ to a post to star it. When a post reaches 5 stars (3 in staff channels), it is posted to <#805603604408827934> (<#937177440311189544> if in a staff
            channel). If a post falls below the required threshold, it is removed from the starboard but may return later on. If a message is edited, the starboard
            message will not be updated; however, if the post drops off the starboard and later returns, the new content will be copied.
    statschannels:
        title: Stats Channels
        body: >
            This server currently maintains two stats channels - <#927057269064085504> displays the overall member count and <#829803392447545404> displays the number
            of server boosters.
    sticky:
        title: Sticky Messages
        body: >
            Sticky messages do exactly what the name says - they stick to the bottom of the channel by deleting + re-sending each time. Note that sticky messages are
            quite annoying and disruptive, and should only be used when absolutely necessary.

            To add a sticky message, do `{prefix}stick <message>`. To remove a stick message, do `{prefix}stickstop`.
        footer: Requires Moderator
    stick:
        title: Add Sticky Message
        body: >
            `{prefix}stick <message>`


            If the current channel does not have a sticky message, set a new message to stay stuck to the bottom of a channel.
        footer: Requires Moderator
    stickstop:
        title: Remove Sticky Message
        body: >
            `{prefix}stickstop`


            Removes the current channel's sticky message if it has one.
    suggestions:
        title: Feedback & Suggestions system
        body: >
            To put your suggestions in <#805458033471782974>, head over to <#805458034251530262> and `{prefix}suggest <your suggestion>`. This will post your suggestion
            to the channel where people can vote on it. Once it has been considered, approved, denied, or implemented by the staff, they will provide a status update to
            your suggestion which will edit the public display and DM you a status update. `{prefix}consider [details]`, `{prefix}approve [details]`, `{prefix}deny [details]`,
            and `{prefix}implement [details]` update the status of the suggestion. Appending `-silent` to the command name will skip DMing the user. Requires Moderator.
    triggers:
        title: Autoresponder Triggers
        body: >
            The autoresponder will send certain messages when certain phrases are sent.


            Commands in this module: `add-trigger`, `rm-trigger`, `wildcard-trigger`, `exact-trigger`, `public-trigger`, `private-trigger`, `no-reply-trigger`,
            `reply-trigger`, `ping-reply-trigger`, `allow-trigger`, `disallow-trigger`, `list-triggers`, `trigger-info`
    add-trigger:
        title: Add Autoresponder Trigger
        body: >
            `{prefix}add-trigger <match> <response>` / `{prefix}add-trigger <match with spaces> ;; <response>`


            Adds a new entry to the autoresponder. When entries are created, they are exact matches, allowed in all channels, and send as normal messages.
        footer: Requires Bot Owner / Admin
    rm-trigger:
        title: Remove Autoresponder Trigger
        body: >
            `{prefix}rm-trigger <match>`


            Remove an entry from the autoresponder. You must call this command with the exact string the autoresponder entry matches.
        footer: Requires Bot Owner / Admin
    wildcard-trigger:
        title: Set Autoresponder Trigger to Wildcard
        body: >
            `{prefix}wildcard-trigger <match>`


            Set an autoresponder entry to match if the message contains the match string as a substring (case-insensitive).
        footer: Requires Bot Owner / Admin
    exact-trigger:
        title: Set Autoresponder Trigger to Exact Match
        body: >
            `{prefix}exact-trigger <match>`


            Set an autoresponder entry to match only if the message is exactly equal to the match string (case-insensitive).
        footer: Requires Bot Owner / Admin
    public-trigger:
        title: Set Autoresponder Trigger to Public
        body: >
            `{prefix}public-trigger <match>`


            Set an autoresponder entry to be allowed in all channels except those explicitly blocked by `{prefix}disallow-trigger`.
        footer: Requires Bot Owner / Admin
    private-trigger:
        title: Set Autoresponder Trigger to Private
        body: >
            `{prefix}private-trigger <match>`


            Set an autoresponder entry to be disallowed in all channels except those explicitly allowed by `{prefix}allow-trigger`.
        footer: Requires Bot Owner / Admin
    no-reply-trigger:
        title: Set Autoresponder Trigger to Normal Message
        body: >
            `{prefix}no-reply--trigger <match>`


            Set an autoresponder entry to send its message as a normal message to the channel.
        footer: Requires Bot Owner / Admin
    reply-trigger:
        title: Set Autoresponder Trigger to Reply (No Ping)
        body: >
            `{prefix}reply-trigger <match>`


            Set an autoresponder entry to send its message as a reply to the original message (without pinging the author).
        footer: Requires Bot Owner / Admin
    ping-reply-trigger:
        title: Set Autoresponder Trigger to Reply (With Ping)
        body: >
            `{prefix}ping-reply-trigger <match>`


            Set an autoresponder entry to send its message as a reply to the original message (will ping the author).
        footer: Requires Bot Owner / Admin
    allow-trigger:
        title: Allow Autoresponder Trigger in Channel
        body: >
            `{prefix}allow-trigger <channel> <match>`


            Explicitly allow an autoresponder entry in the specified channel, even if it is private.
        footer: Requires Bot Owner / Admin
    disallow-trigger:
        title: Disallow Autoresponder Trigger in Channel
        body: >
            `{prefix}disallow-trigger <channel> <match>`


            Explicitly disallow an autoresponder entry in the specified channel, even if it is public.
        footer: Requires Bot Owner / Admin
    list-triggers:
        title: List Autoresponder Triggers
        body: >
            `{prefix}list-triggers`


            List all autoresponder entries. This does not check whether the entries are allowed in the current channel.
    trigger-info:
        title: Show Autoresponder Trigger Info
        body: >
            `{prefix}trigger-info <match>`


            Show information for a specific autoresponder entry.
    utility:
        title: Utility Commands
        body: >
            Useful commands for things like showing info or other uncategorized commands that don't belong to the `fun` module.

            Commands in this module: `ranks`, `reload-config`, `clone`, `webhook`, `point`
    ranks:
        title: Show Ranks
        body: >
            `{prefix}ranks [member]`


            Show the ranks (not roles) for a member, or if not specified, youself. Ranks are internal permission categories.
    reload-config:
        title: Reload Configuration File
        body: >
            `{prefix}reload-config`


            Reload `config.json`. Most things will be brought up-to-date by this command. This is only necessary if the file was edited manually, not if the
            configuration was modified via commands (unless otherwise specified).
        footer: Requires Bot Owner / Admin
    clone:
        title: Clone Message
        body: >
            `{prefix}clone <channel> <message link>`


            Clone a command, reposting its content verbatim, including embeds, interactions, files, etc. Conveniently, this is able to copy reaction role
            prompts. This will not properly copy polls or most other interactions; reaction roles are a unique case. This is mostly useful for things like
            cloning messages from a modmail thread to admin chat.
        footer: Requires Bot Owner / Admin
    webhook:
        title: Set Webhook
        body: >
            `{prefix}webhook <id>`


            Set this server's webhook, which can be altered with `{prefix}point`. Please paste the ID and not the URL, as giving out the URL will expose it to
            everyone who can see it and the webhook will need to be reset. The ID is the first part after the domain in the URL (the number), not the token
            afterwards.
        footer: Requires Bot Owner / Admin
    point:
        title: Point Webhook
        body: >
            `{prefix}point <channel>`


            Point this server's webhook, as set by `{prefix}webhook`, to the specified channel, and DM you the webhook URL. This is convenient because Discord
            doesn't let you search through channels when changing a webhook's target which is extremely annoying, and also webhooks don't work well on mobile
            because mobile Discord is really bad.
        footer: Requires Bot Owner / Admin
    verification:
        title: CAPTCHA Verification System
        body: >
            This server uses Google reCAPTCHA to protect itself from raids and bot users. After reading the rules, unverified users have the option to press
            the button interaction which sends them an ephemeral message (only visible to them) containing a unique link that will verify them. Passing
            captcha verification will grant them <@&805458032929538061>, which grants them access to most of the rest of the server.


            `{prefix}post-verify <channel>` will create a new verification prompt but this command shouldn't really need to be used. Requires Bot Owner / Admin.
    website:
        title: Shenhe Mains Website
        body: >
            https://shenhemains.com - check out our website here! This website serves as the official page for this discord server. Credit goes to the dev and art
            teams for their work on this site and its assets, as well as many other staff members who provided feedback for it during development. This website
            also contains the staff application forms and a staff dashboard for things like modmail threads and viewing staff applications.
    welcome:
        title: Welcome System
        body: >
            New members are sent a welcome message in <#890252868135825408> prompting them to read the rules and verify themselves.
    modulehandler:
        title: Module Handler
        body: >
            The module handler connects all of the modules to the bot and handles the logic for dispatching commands and sending client events like deleted channels
            and button interactions. `{prefix}load <module>`, `{prefix}unload <module>`, and `{prefix}reload <module>` can be used to dynamically enable and disable
            commands within the module and reload the module if the code has been updated. This allows certain commands to be updated without affecting functionality
            of other commands or restarting the bot.
        footer: Requires Bot Owner / Admin
